#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int N = 1e5+10;
bool st[N];
int prime[N], phi[N], idx;

int gcd(int a,int b){
    return b?gcd(b,a%b):a;
}

int qp(int a,int b,int p){
    LL ret = 1;
    while(b){
        if(b&1) ret = ret*a%p;
        a = a*a%p;
        b >>= 1;
    }
    return ret;
}

void euler(int n){
    phi[1] = 1;
    for(int i=2;i<=n;i++){
        if(st[i]==0){
            prime[idx++] = i;
            phi[i] = i-1;
        }
        for(int j=0;prime[j]<=n/i;j++){
            st[i*prime[j]] = 1;
            if(i%prime[j]==0){
                phi[i*prime[j]] = phi[i]*prime[j];
                break;
            }
            phi[i*prime[j]] = phi[i]*(prime[j]-1);
        }
    }
}

int exgcd(int a,int b,int &x,int &y){
    if(b==0){
        x = 1;
        y = 0;
        return a;
    }else{
        int ret = exgcd(b,a%b,y,x);
        y -= a/b*x;
        return ret;
    }
}

int main(){
	euler(N-10);
    int n;
    cin >> n; 
    while(n--){
        int a, p;
        cin >> a >> p;
        if(gcd(a,p)!=1) cout << "impossible" << endl;
        else{
            int x,y;
            exgcd(a,p,x,y);
            cout << qp(a,p-2,p) << " ";
            cout << (x%p+p)%p << " ";
            cout << qp(a,phi[p]-1,p) << endl;
        }
    }
    return 0;
}